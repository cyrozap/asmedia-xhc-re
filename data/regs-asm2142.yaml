meta:
  chip: ASM2142/ASM3142
  license: CC-BY-SA-4.0

xdata:
  - name: XRAM
    start: 0x00000
    end: 0x0BFFF
    permissions: RW
    notes: |
      48 kB of data memory, used primarily for DMA buffers between the USB and
      PCIe controllers, but also for the firmware's temporary data storage.
  - name: N/A
    start: 0x0C000
    end: 0x0FFFF
    permissions: RO
    notes: |
      16 kB of unused address space.
  - name: MMIO
    start: 0x10000
    end: 0x1FFFF
    permissions: RW
    notes: |
      64 kB of memory-mapped peripheral address space.

registers:
  pci:
    - name: MBOX_DOORBELL
      start: 0xE0
      end: 0xE0
      bits:
        - name: READ_ACK
          start: 0
          end: 0
          permissions: RW1C
          notes: |
            A flag that can be read, set, or cleared by the 8051, but can only
            be read or cleared by the host. Corresponds to
            `PCI_CONFIG_READ_ACK` in XDATA.
        - name: WRITE_START
          start: 1
          end: 1
          permissions: RW1S
          notes: |
            A flag that can be read, set, or cleared by the 8051, but can only
            be read or set by the host. Corresponds to `PCI_CONFIG_WRITE_START`
            in XDATA.
    - name: CODE_RAM_ADDR
      start: 0xE2
      end: 0xE3
      permissions: RW
      notes: |
        The next address in CODE RAM to be written to or read from. Aligned on
        2-byte boudaries (bit zero is permanently set to zero).

        When writing, the 32 kB bank to write to is selected by writing the data
        to either `CODE_RAM_WRITE_DATA.LOWER_BANK_DATA` or
        `CODE_RAM_WRITE_DATA.UPPER_BANK_DATA`, so bit 15 in this register
        actually maps to bit 16 in the actual address. i.e., the real address is
        `((CODE_RAM_ADDR & 0x8000) << 1) | (0x8000 if CODE_RAM_WRITE_DATA.UPPER_BANK_DATA else 0x0000) | (CODE_RAM_ADDR & 0x7FFE)`.
        The address increments by two on every write to `CODE_RAM_WRITE_DATA`.

        When reading, the 16 kB bank to read from is selected by reading the
        data from one (or all) of the `BANK0_DATA..BANK3_DATA` registers in
        `CODE_RAM_READ_DATA`. Bit 15 in this register maps to bit 16 in the
        actual address, so the final address is
        `(((CODE_RAM_ADDR & 0x8000) << 1) | (CODE_RAM_ADDR & 0x7FFE)) + ((the bank index) << 14)`.
    - name: CPU_MODE
      start: 0xE6
      end: 0xE6
      permissions: RO
      notes: |
        The current value of `CPU_MODE_CURRENT`. See `CPU_MODE_CURRENT` for more
        information.
    - name: CODE_ACCESS
      start: 0xEF
      end: 0xEF
      bits:
        - name: READ_N_WRITE
          start: 6
          end: 6
          permissions: RW
          notes: |
            When the `ENABLE_CODE_ACCESS` bit is set:

            - Clear this bit to enable writing to CODE RAM through the
              `CODE_RAM_WRITE_DATA` register and disable reading from CODE RAM
              through the `CODE_RAM_READ_DATA` register.
            - Set this bit to disable writing to CODE RAM through the
              `CODE_RAM_WRITE_DATA` register and enable reading from CODE RAM
              through the `CODE_RAM_READ_DATA` register.
        - name: ENABLE_CODE_ACCESS
          start: 7
          end: 7
          permissions: RW
          notes: |
            Set to enable access to CODE RAM and hold the 8051 and xHC in reset.
            Clear to disable access to CODE RAM and release the 8051 and xHC
            from reset. The type of access granted depends on the state of the
            `READ_N_WRITE` bit.
    - name: MBOX_D2H
      start: 0xF0
      end: 0xF7
      permissions: RO
      notes: |
        A mailbox register, from which data sent by the device can be read.
    - name: MBOX_H2D
      start: 0xF8
      end: 0xFF
      permissions: RW
      notes: |
        A mailbox register, to which data from the host can be written.

  bar0:
    - name: MMIO_ACCESS_ADDRESS
      start: 0x3000
      end: 0x3001
      permissions: RW
      notes: |
        The lowest 16 bits of the address of the MMIO byte that you want to
        access.
    - name: MMIO_ACCESS_WRITE_DATA
      start: 0x3004
      end: 0x3004
      permissions: RW
      notes: |
        The data you want to write to `MMIO_ACCESS_ADDRESS`.
    - name: MMIO_ACCESS_READ_DATA
      start: 0x3008
      end: 0x3008
      permissions: RO
      notes: |
        The byte read from `MMIO_ACCESS_ADDRESS`.
    - name: CPU_PC
      start: 0x300A
      end: 0x300B
      permissions: RO
      notes: |
        The current 8051 program counter.
    - name: CODE_RAM_WRITE_DATA
      start: 0x3010
      end: 0x3013
      bits:
        - name: LOWER_BANK_DATA
          start: 0
          end: 15
          permissions: WO
          notes: |
            The 16-bit little-endian data to write to `CODE_RAM_ADDR + 0x0000`.
        - name: UPPER_BANK_DATA
          start: 16
          end: 31
          permissions: WO
          notes: |
            The 16-bit little-endian data to write to `CODE_RAM_ADDR + 0x8000`.
      notes: |
        Bit 15 in the CODE RAM write address is cleared when writing to
        `LOWER_BANK_DATA` and set when writing to `UPPER_BANK_DATA`. After
        writing to either `LOWER_BANK_DATA` or `UPPER_BANK_DATA`,
        `CODE_RAM_ADDR` is increased by two.
    - name: CODE_RAM_READ_DATA
      start: 0x3018
      end: 0x301F
      bits:
        - name: BANK0_DATA
          start: 0
          end: 15
          permissions: RO
          notes: |
            The 16-bit little-endian data to read from `CODE_RAM_ADDR + 0x0000`.
        - name: BANK2_DATA
          start: 16
          end: 31
          permissions: RO
          notes: |
            The 16-bit little-endian data to read from `CODE_RAM_ADDR + 0x8000`.
        - name: BANK1_DATA
          start: 32
          end: 47
          permissions: RO
          notes: |
            The 16-bit little-endian data to read from `CODE_RAM_ADDR + 0x4000`.
        - name: BANK3_DATA
          start: 48
          end: 63
          permissions: RO
          notes: |
            The 16-bit little-endian data to read from `CODE_RAM_ADDR + 0xC000`.
      notes: |
        Bits 14 and 15 in the CODE RAM read address are set or cleared depending
        which bank data register is being accessed. Reading from `BANK0_DATA`
        sets both of those bits to 0, reading from `BANK1_DATA` sets bit 14 to 1
        and 15 to 0, reading from `BANK2_DATA` sets bit 14 to 0 and 15 to 1, and
        reading from `BANK3_DATA` sets both bits 14 and 15 to 1.

  xdata:
    - name: PCI_CONFIG_C4
      start: 0x10030
      end: 0x10033
      permissions: RW
      notes: |
        Corresponds to PCI configuration space register 0xC4.
    - name: PCI_CONFIG_SVID_SSID
      start: 0x10050
      end: 0x10053
      bits:
        - name: SUBSYSTEM_VID
          start: 0
          end: 15
          permissions: RW
          notes: |
            PCI Subsystem Vendor ID.
        - name: SUBSYSTEM_ID
          start: 16
          end: 31
          permissions: RW
          notes: |
            PCI Subsystem ID.
      notes: |
        The Subsystem Vendor ID and Subsystem ID register in PCI configuration
        space (offset 0x2C).
    - name: CPU_MISC
      start: 0x1500E
      end: 0x1500E
      bits:
        - name: CODE_RAM_WRITE_ENABLE
          start: 0
          end: 0
          permissions: RW
          notes: |
            Set this bit to enable the host to write to CODE RAM using the
            `CODE_RAM_ADDR` PCI config space register and the
            `CODE_RAM_WRITE_DATA` PCI BAR0 register.
    - name: CPU_MODE_NEXT
      start: 0x15040
      end: 0x15040
      bits:
        - name: CODE_LOCATION
          start: 0
          end: 0
          permissions: RW
          notes: |
            Set this bit to boot from CODE RAM, clear to boot from CODE ROM.
        - name: CLOCK_DIV
          start: 1
          end: 1
          permissions: RW
          notes: |
            Set this bit to divide the CPU clock frequency by two. This affects
            both the CPU and the timer peripheral, as the timer clock is derived
            from the CPU clock. Set this bit to set the CPU clock to 78.125 MHz
            and the timer clock to approximately 9.537 kHz. Clear this bit to
            use the undivided CPU clock speed of 156.25 MHz and timer clock
            speed of approximately 19.073 kHz.
      notes: |
        The settings in this register will take effect and be latched into
        `CPU_MODE_CURRENT` at the next reset.
    - name: CPU_MODE_CURRENT
      start: 0x15041
      end: 0x15041
      bits:
        - name: CODE_LOCATION
          start: 0
          end: 0
          permissions: RO
          notes: |
            This bit is set if the current code is executing from CODE RAM,
            and it's clear if executing from CODE ROM. This bit will always be
            set when our code is running, since our code can only ever be
            written to CODE RAM as CODE ROM is read-only.
        - name: CLOCK_DIV
          start: 1
          end: 1
          permissions: RO
          notes: |
            If set, this bit indicates that the CPU clock is being divided by
            two. If it's clear, the CPU clock is not being divided by two. See
            `CPU_MODE_NEXT.CLOCK_DIV` for more information.
      notes: |
        The value of this register is latched from `CPU_MODE_NEXT` on reset,
        and indicates the settings for the currently-executing code.
    - name: CPU_EXEC_CTRL
      start: 0x15042
      end: 0x15042
      bits:
        - name: RESET
          start: 0
          end: 0
          permissions: RW
          notes: |
            Set this bit to reset the CPU.
        - name: HALT
          start: 1
          end: 1
          permissions: RW
          notes: |
            Set this bit to halt the CPU and hold it in reset. Since the CPU
            can't un-halt itself, the only way to recover from this state is to
            use the `MMIO_ACCESS_ADDRESS`/`MMIO_ACCESS_WRITE_DATA` registers in
            PCI BAR0 space to clear this bit.
    - name: HARDWARE_ACCESS
      start: 0x15087
      end: 0x15087
      bits:
        - name: MMIO_ACCESS_ENABLE
          start: 4
          end: 4
          permissions: RW
          notes: |
            Set this bit to enable access to MMIO in XDATA via the
            `MMIO_ACCESS_ADDRESS` / `MMIO_ACCESS_WRITE_DATA` /
            `MMIO_ACCESS_READ_DATA` registers in BAR0. Clear this bit to disable
            this access.
    - name: CHIP_VERSION
      start: 0x150B2
      end: 0x150B2
      permissions: RO
      notes: |
        Some hardware version number that is set during the manufacturing
        process. Presumably, this represents the silicon die revision.
    - name: UART_RBR
      start: 0x15100
      end: 0x15100
      permissions: RO
      notes: |
        UART Receive Buffer Register.
    - name: UART_THR
      start: 0x15101
      end: 0x15101
      permissions: RW
      notes: |
        UART Transmit Hold Register.
    - name: UART_RFBR
      start: 0x15105
      end: 0x15105
      permissions: RO
      notes: |
        UART RX FIFO Bytes Received. Indicates the number of bytes in the RX
        FIFO available for reading, and decreases by 1 each time `UART_RBR` is
        read.
    - name: UART_TFBF
      start: 0x15106
      end: 0x15106
      permissions: RO
      notes: |
        UART TX FIFO Bytes Free. Indicates the number of bytes available in
        the TX FIFO. Decreases by 1 each time `UART_THR` is written to, and
        increases by 1 for each byte that gets transmitted.
    - name: UART_LCR
      start: 0x15107
      end: 0x15107
      bits:
        - name: DATA_BITS
          start: 0
          end: 1
          permissions: RW
          notes: |
            The number of data bits per character.

            * 0: 5 bits
            * 1: 6 bits
            * 2: 7 bits
            * 3: 8 bits
        - name: STOP_BITS
          start: 2
          end: 2
          permissions: RW
          notes: |
            The number of stop bits per character.

            * 0: 1 stop bit
            * 1: 2 stop bits

            Unlike 8250-compatible UARTs, when this bit is set, 5-bit
            characters will have two stop bits, not 1.5.
        - name: PARITY
          start: 3
          end: 5
          permissions: RW
          notes: |
            The parity bit setting.

            * 0bXX0: None
            * 0b001: Odd
            * 0b011: Even
            * 0b101: Mark
            * 0b111: Space
      notes: |
        UART Line Control Register. The reset value is 0x0B (mode 8O1), so if
        you want to use mode 8N1, you need to set this to 0x03.
    - name: UART_DIV
      start: 0x15109
      end: 0x1510A
      permissions: RW
      notes: |
        UART clock divisor. The baudrate of the UART is equal to
        `156.25 MHz / UART_DIV`. The UART clock is not affected by the CPU clock
        divider--the base frequency is always 156.25 MHz.
    - name: PCI_CONFIG_READ_ACK
      start: 0x18140
      end: 0x18140
      bits:
        - name: READ_ACK
          start: 0
          end: 0
          permissions: RW
          notes: |
            Corresponds to PCI configuration space register 0xE0
            (`MBOX_DOORBELL`), bit 0.
    - name: PCI_CONFIG_WRITE_START
      start: 0x18141
      end: 0x18141
      bits:
        - name: WRITE_START
          start: 0
          end: 0
          permissions: RW
          notes: |
            Corresponds to PCI configuration space register 0xE0
            (`MBOX_DOORBELL`), bit 1.
    - name: PCI_CONFIG_D2H0
      start: 0x18148
      end: 0x1814B
      permissions: RW
      notes: |
        Corresponds to PCI configuration space register 0xF0 (`MBOX_D2H`).
        Writable by the device, RO for the host.
    - name: PCI_CONFIG_D2H1
      start: 0x1814C
      end: 0x1814F
      permissions: RW
      notes: |
        Corresponds to PCI configuration space register 0xF4 (`MBOX_D2H`).
        Writable by the device, RO for the host.
    - name: PCI_CONFIG_H2D0
      start: 0x18150
      end: 0x18153
      permissions: RO
      notes: |
        Corresponds to PCI configuration space register 0xF8 (`MBOX_H2D`).
        Writable by the host, RO for the device.
    - name: PCI_CONFIG_H2D1
      start: 0x18154
      end: 0x18157
      permissions: RO
      notes: |
        Corresponds to PCI configuration space register 0xFC (`MBOX_H2D`).
        Writable by the host, RO for the device.
    - name: PCI_CONFIG_VID_DID
      start: 0x18550
      end: 0x18553
      bits:
        - name: VENDOR_ID
          start: 0
          end: 15
          permissions: RW
          notes: |
            PCI Vendor ID.
        - name: DEVICE_ID
          start: 16
          end: 31
          permissions: RW
          notes: |
            PCI Device ID.
      notes: |
        The Vendor ID and Device ID register in PCI configuration space
        (offset 0x00).
    - name: PCI_CONFIG_CLASS_REV
      start: 0x18554
      end: 0x18557
      bits:
        - name: REVISION_ID
          start: 0
          end: 7
          permissions: RW
          notes: |
            PCI Revision ID.
        - name: CLASS_CODE
          start: 8
          end: 31
          permissions: RW
          notes: |
            PCI Class Code.
      notes: |
        The Class Code and Revision ID register in PCI configuration space
        (offset 0x08).
    - name: XHCI_HCCPARAMS1
      start: 0x18810
      end: 0x18813
      permissions: RW
      notes: |
        Host Controller Capability Parameters 1. See the xHCI specification
        for details.
    - name: XHCI_CRCR
      start: 0x18838
      end: 0x1883F
      permissions: RO
      notes: |
        Command Ring Control Register. See the xHCI specification for details.
    - name: XHCI_DCBAAP
      start: 0x18850
      end: 0x18857
      permissions: RO
      notes: |
        Device Context Base Address Array Pointer Register. See the xHCI
        specification for details.
