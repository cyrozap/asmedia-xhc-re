meta:
  chip: ASM1142

xdata:
  - name: XRAM
    start: 0x0000
    end: 0xBFFF
    permissions: RW
    notes: |
      48 kB of data memory, used primarily for DMA buffers between the USB and
      PCIe controllers, but also for the firmware's temporary data storage.
  - name: N/A
    start: 0xC000
    end: 0xDFFF
    permissions: RO
    notes: |
      8 kB of unused address space.
  - name: MMIO
    start: 0xE000
    end: 0xFFFF
    permissions: RW
    notes: |
      8 kB of memory-mapped peripheral address space.

registers:
  pci:
    - name: MBOX_DOORBELL
      start: 0xE0
      end: 0xE0
      bits:
        - name: READ_ACK
          start: 0
          end: 0
          permissions: RW1C
          notes: |
            A flag that can be read, set, or cleared by the 8051, but can only
            be read or cleared by the host. Corresponds to
            `PCI_CONFIG_READ_ACK` in XDATA.
        - name: WRITE_START
          start: 1
          end: 1
          permissions: RW1S
          notes: |
            A flag that can be read, set, or cleared by the 8051, but can only
            be read or set by the host. Corresponds to `PCI_CONFIG_WRITE_START`
            in XDATA.
    - name: CODE_RAM_ADDR
      start: 0xE2
      end: 0xE3
      permissions: RW
      notes: |
        The next address in CODE RAM to be written to. Aligned on 2-byte
        boudaries (bit zero is permanently set to zero). Highest bit is always
        zero--the 32 kB bank to write to is selected by writing the data to
        either `LOWER_BANK_DATA` or `UPPER_BANK_DATA`. Increments by two on
        every write to `LOWER_BANK_DATA` or `UPPER_BANK_DATA`.
    - name: CODE_RAM_DATA
      start: 0xE4
      end: 0xE7
      bits:
        - name: LOWER_BANK_DATA
          start: 0
          end: 15
          permissions: WO
          notes: |
            The 16-bit little-endian data to write to `CODE_RAM_ADDR + 0x0000`.
        - name: UPPER_BANK_DATA
          start: 16
          end: 31
          permissions: WO
          notes: |
            The 16-bit little-endian data to write to `CODE_RAM_ADDR + 0x8000`.
      notes: |
        Bit 15 in the CODE RAM write address is cleared when writing to
        `LOWER_BANK_DATA` and set when writing to `UPPER_BANK_DATA`. After
        writing to either `LOWER_BANK_DATA` or `UPPER_BANK_DATA`,
        `CODE_RAM_ADDR` is increased by two.
    - name: CPU_STATUS
      start: 0xE4
      end: 0xE7
      bits:
        - name: PC
          start: 0
          end: 15
          permissions: RO
          notes: |
            The current 8051 program counter.
        - name: MODE
          start: 16
          end: 23
          permissions: RO
          notes: |
            The current value of `CPU_MODE_CURRENT`. See `CPU_MODE_CURRENT` for
            more information.
    - name: MMIO_ACCESS
      start: 0xE8
      end: 0xEB
      bits:
        - name: ADDRESS
          start: 0
          end: 15
          permissions: RW
          notes: |
            The address of the MMIO byte that you want to access.
        - name: WRITE_DATA
          start: 16
          end: 23
          permissions: RW
          notes: |
            The data you want to write to `ADDRESS`.
        - name: READ_DATA
          start: 24
          end: 31
          permissions: RO
          notes: |
            The byte read from `ADDRESS`.
      notes: |
        This register grants access to MMIO registers entirely in hardware,
        without involving the 8051 core. To read or write a register, first
        write the address to `ADDRESS`, then either write your data to
        `WRITE_DATA` or read it from `READ_DATA`. Please note that data is
        latched into `READ_DATA` only when writing to `ADDRESS`, so if you want
        to read a register you have just written to, you need to write the
        address to `ADDRESS` again before reading `READ_DATA`. Also note that
        this register can not be used to access XRAM--only MMIO access is
        possible.
    - name: CPU_CONTROL
      start: 0xEC
      end: 0xEF
      bits:
        - name: RESET
          start: 31
          end: 31
          permissions: RW
          notes: |
            Set to hold the 8051 and xHC in reset, clear to release from reset.
    - name: MBOX_D2H
      start: 0xF0
      end: 0xF7
      permissions: RO
      notes: |
        A mailbox register, from which data sent by the device can be read.
    - name: MBOX_H2D
      start: 0xF8
      end: 0xFF
      permissions: RW
      notes: |
        A mailbox register, to which data from the host can be written.

  sfr:
    - name: HARD_COPY_CTRL
      start: 0x80
      end: 0x80
      bits:
        - name: MODE
          start: 3
          end: 3
          permissions: RW
          notes: |
            Selects whether the data to copy should be copied from XRAM at
            `HARD_COPY_SRC` or from `HARD_COPY_DATA`. Set to copy data from
            `HARD_COPY_DATA`, clear to copy from `HARD_COPY_SRC`.
        - name: COPY_LEN_HI
          start: 4
          end: 7
          permissions: RW
          notes: |
            The highest 4 bits ([11:8]) of the 12-bit copy length.
    - name: PCON
      start: 0x87
      end: 0x87
      bits:
        - name: MEMSEL
          start: 4
          end: 4
          permissions: RW
          notes: |
            Select whether XDATA or CODE RAM should be accessed with MOVX
            instructions. Set to access CODE RAM, clear to access XDATA.
    - name: MISC_CTRL
      start: 0x90
      end: 0x90
      bits:
        - name: VEC_N_ADD_SUB
          start: 0
          end: 0
          permissions: RW
          notes: |
            Clear this bit to perform an add/subtract operation.
        - name: VEC_STATUS
          start: 4
          end: 4
          permissions: RO
          notes: |
            After `VEC_START` is cleared by hardware, this bit indicates whether
            the vector operation completed successfully. If the operation
            completed successfully, this bit will be set to 1. If it failed,
            this bit will be set to 0.
        - name: VEC_SUB_N_ADD
          start: 5
          end: 5
          permissions: RW
          notes: |
            Set this bit to perform a subtraction, clear it to perform an
            addition.
        - name: VEC_START
          start: 6
          end: 6
          permissions: RW1S
          notes: |
            Writing a 1 to this bit will trigger a vector operation. When the
            vector operation is finished, hardware sets this bit to 0.
        - name: HARD_COPY_START
          start: 7
          end: 7
          permissions: RW1S
          notes: |
            Writing a 1 to this bit will trigger a hardware copy operation.
            When the copy is finished, hardware sets this bit to 0.
    - name: HARD_COPY_SRC
      start: 0x9A
      end: 0x9B
      permissions: RW
      notes: |
        The source address for the hardware copy.
    - name: HARD_COPY_DST
      start: 0x9C
      end: 0x9D
      permissions: RW
      notes: |
        The destination address for the hardware copy.
    - name: HARD_COPY_LEN_LO
      start: 0x9E
      end: 0x9E
      permissions: RW
      notes: |
        The lower 8 bits ([7:0]) of the 12-bit copy length.
    - name: VEC_CONST
      start: 0xA2
      end: 0xA3
      permissions: RW
      notes: |
        The constant to add to/subtract from each element in the array pointed
        to by `VEC_ADDR`. When subtracting, the value of this constant must be
        less than the value of every element in the array or the operation will
        fail.
    - name: VEC_LEN
      start: 0xA4
      end: 0xA5
      permissions: RW
      notes: |
        The length of the array/vector, in number of 16-bit elements. Must be
        greater than zero.
    - name: VEC_OFFSET
      start: 0xA6
      end: 0xA7
      permissions: RW
      notes: |
        The number of 16-bit elements to offset the array/vector address
        `VEC_ADDR` by.
    - name: VEC_ADDR
      start: 0xB4
      end: 0xB5
      permissions: RW
      notes: |
        The byte address of the array/vector to operate on. This address must be
        aligned to 8 bytes--the lower 3 bits in this register are ignored.
    - name: HARD_COPY_DATA
      start: 0xC0
      end: 0xCF
      permissions: RW
      notes: |
        16 bytes of data that will be copied to XRAM at the address in
        `HARD_COPY_DST` if `HARD_COPY_CTRL.MODE` is set.

  xdata:
    - name: PCI_CONFIG_C4
      start: 0xE244
      end: 0xE247
      permissions: RW
      notes: |
        Corresponds to PCI configuration space register 0xC4.
    - name: PCI_CONFIG_SVID_SSID
      start: 0xE260
      end: 0xE263
      bits:
        - name: SUBSYSTEM_VID
          start: 0
          end: 15
          permissions: RW
          notes: |
            PCI Subsystem Vendor ID.
        - name: SUBSYSTEM_ID
          start: 16
          end: 31
          permissions: RW
          notes: |
            PCI Subsystem ID.
      notes: |
        The Subsystem Vendor ID and Subsystem ID register in PCI configuration
        space (offset 0x2C).
    - name: INT_MASK_EX1
      start: 0xF030
      end: 0xF031
      permissions: RW
      notes: |
        Bit mask for `INT_FLAGS_EX1`. Each bit in this register masks the bit at
        the same position in `INT_FLAGS_EX1`.
    - name: INT_FLAGS_EX1
      start: 0xF032
      end: 0xF033
      bits:
        - name: MBOX_WRITE_START
          start: 4
          end: 4
          permissions: RW1C
          notes: |
            This flag is set when the host writes a 1 to bit 1 of PCI
            configuration space register `MBOX_DOORBELL`
            (`MBOX_DOORBELL.WRITE_START`).
        - name: MBOX_READ_ACK
          start: 5
          end: 5
          permissions: RW1C
          notes: |
            This flag is set when the host writes a 1 to bit 0 of PCI
            configuration space register `MBOX_DOORBELL`
            (`MBOX_DOORBELL.READ_ACK`).
      notes: |
        Flags that get set when their corresponding interrupt source is
        triggered. These interrupt sources trigger External Interrupt 1.
    - name: PCIE_DMA_DEVICE_ADDR
      start: 0xF040
      end: 0xF041
      permissions: RW
      notes: |
        The XDATA address for the PCIe DMA.
    - name: PCIE_DMA_LEN
      start: 0xF044
      end: 0xF045
      permissions: RW
      notes: |
        The length of the PCIe DMA transfer, in bytes.
    - name: PCIE_DMA_OP
      start: 0xF046
      end: 0xF046
      permissions: RW
      notes: |
        Maybe the DMA operation? Possible values: 1, 3, 4, 5, 6, 7, 8
    - name: PCIE_DMA_CSR
      start: 0xF04B
      end: 0xF04B
      bits:
        - name: COMPLETE
          start: 0
          end: 0
          permissions: RW1C
          notes: |
            Indicates the completion of a DMA transfer. Write 1 to clear.
    - name: PCIE_DMA_RESULT
      start: 0xF04C
      end: 0xF04C
      bits:
        - name: RESULT
          start: 0
          end: 0
          permissions: RW1C
          notes: |
            Indicates the status of the completed DMA transfer. Write 1 to
            clear.
    - name: PCIE_DMA_HOST_ADDR
      start: 0xF050
      end: 0xF057
      permissions: RW
      notes: |
        The host address for the PCIe DMA.
    - name: PCI_CONFIG_READ_ACK
      start: 0xF0E0
      end: 0xF0E0
      bits:
        - name: READ_ACK
          start: 0
          end: 0
          permissions: RW
          notes: |
            Corresponds to PCI configuration space register 0xE0
            (`MBOX_DOORBELL`), bit 0.
    - name: PCI_CONFIG_WRITE_START
      start: 0xF0E1
      end: 0xF0E1
      bits:
        - name: WRITE_START
          start: 0
          end: 0
          permissions: RW
          notes: |
            Corresponds to PCI configuration space register 0xE0
            (`MBOX_DOORBELL`), bit 1.
    - name: PCI_CONFIG_D2H0
      start: 0xF0E8
      end: 0xF0EB
      permissions: RW
      notes: |
        Corresponds to PCI configuration space register 0xF0 (`MBOX_D2H`).
        Writable by the device, RO for the host.
    - name: PCI_CONFIG_D2H1
      start: 0xF0EC
      end: 0xF0EF
      permissions: RW
      notes: |
        Corresponds to PCI configuration space register 0xF4 (`MBOX_D2H`).
        Writable by the device, RO for the host.
    - name: PCI_CONFIG_H2D0
      start: 0xF0F0
      end: 0xF0F3
      permissions: RO
      notes: |
        Corresponds to PCI configuration space register 0xF8 (`MBOX_H2D`).
        Writable by the host, RO for the device.
    - name: PCI_CONFIG_H2D1
      start: 0xF0F4
      end: 0xF0F7
      permissions: RO
      notes: |
        Corresponds to PCI configuration space register 0xFC (`MBOX_H2D`).
        Writable by the host, RO for the device.
    - name: UART_RBR
      start: 0xF100
      end: 0xF100
      permissions: RO
      notes: |
        UART Receive Buffer Register.
    - name: UART_THR
      start: 0xF101
      end: 0xF101
      permissions: RW
      notes: |
        UART Transmit Hold Register.
    - name: UART_RFBR
      start: 0xF105
      end: 0xF105
      permissions: RO
      notes: |
        UART RX FIFO Bytes Received. Indicates the number of bytes in the RX
        FIFO available for reading, and decreases by 1 each time `UART_RBR` is
        read.
    - name: UART_TFBF
      start: 0xF106
      end: 0xF106
      permissions: RO
      notes: |
        UART TX FIFO Bytes Free. Indicates the amount of space available in
        the TX FIFO. Increases by 1 each time `UART_THR` is written to, and
        decreases by 1 for each byte that gets transmitted.
    - name: UART_LCR
      start: 0xF107
      end: 0xF107
      bits:
        - name: DATA_BITS
          start: 0
          end: 1
          permissions: RW
          notes: |
            The number of data bits per character.

            * 0: 5 bits
            * 1: 6 bits
            * 2: 7 bits
            * 3: 8 bits
        - name: STOP_BITS
          start: 2
          end: 2
          permissions: RW
          notes: |
            The number of stop bits per character.

            * 0: 1 stop bit
            * 1: 2 stop bits

            Unlike 8250-compatible UARTs, when this bit is set, 5-bit
            characters will have two stop bits, not 1.5.
        - name: PARITY
          start: 3
          end: 5
          permissions: RW
          notes: |
            The parity bit setting.

            * 0bXX0: None
            * 0b001: Odd
            * 0b011: Even
            * 0b101: Mark
            * 0b111: Space
      notes: |
        UART Line Control Register. The reset value is 0x0B (mode 8O1), so if
        you want to use mode 8N1, you need to set this to 0x03.
    - name: UART_DIV
      start: 0xF109
      end: 0xF10A
      permissions: RW
      notes: |
        UART clock divisor. The baudrate of the UART is equal to
        `156.25 MHz / UART_DIV`. The UART clock is not affected by the CPU clock
        divider--the base frequency is always 156.25 MHz.
    - name: TIMER_DIV
      start: 0xF300
      end: 0xF300
      permissions: RW
      notes: |
        The timer clock divisor. Must be greater than or equal to 1. The timer
        clock frequency is equal to `CPU clock frequency / 8192 / TIMER_DIV`.
        The CPU clock frequency is either 156.25 MHz or 78.125 MHz, depending on
        the value of `CPU_MODE_CURRENT.CLOCK_DIV`, so the timer's base clock
        frequency is approximately equal to either 19.073 kHz or 9.537 kHz.
    - name: TIMER_THRESHOLD
      start: 0xF301
      end: 0xF302
      permissions: RW
      notes: |
        When the timer's counter reaches this value, the
        `TIMER_CSR.THRESHOLD_MET` bit will be set, and the `TIMER_CSR.RUN` bit
        will be cleared.
    - name: TIMER_CSR
      start: 0xF303
      end: 0xF303
      bits:
        - name: RUN
          start: 0
          end: 0
          permissions: RW
          notes: |
            Set to start the timer. Clear to stop the timer.
        - name: THRESHOLD_MET
          start: 1
          end: 1
          permissions: RW1C
          notes: |
            Indicates that the timer's internal counter has reached the value of
            `TIMER_THRESHOLD`.
    - name: TIMER_IE
      start: 0xF304
      end: 0xF304
      bits:
        - name: EX1
          start: 0
          end: 0
          permissions: RW
          notes: |
            This bit controls whether the `TIMER_CSR.THRESHOLD_MET` signal will
            trigger External Interrupt 1. When this bit is set and
            `TIMER_CSR.THRESHOLD_MET` is high, the External Interrupt 1 signal
            will be pulled low. When either this bit or
            `TIMER_CSR.THRESHOLD_MET` are cleared, the External Interrupt 1
            signal will return to the state it was before either bit was set.
    - name: CPU_MODE_NEXT
      start: 0xF340
      end: 0xF340
      bits:
        - name: CODE_LOCATION
          start: 0
          end: 0
          permissions: RW
          notes: |
            Set this bit to boot from CODE RAM, clear to boot from CODE ROM.
        - name: CLOCK_DIV
          start: 1
          end: 1
          permissions: RW
          notes: |
            Set this bit to divide the CPU clock frequency by two. This affects
            both the CPU and the timer peripheral, as the timer clock is derived
            from the CPU clock. Set this bit to set the CPU clock to 78.125 MHz
            and the timer clock to approximately 9.537 kHz. Clear this bit to
            use the undivided CPU clock speed of 156.25 MHz and timer clock
            speed of approximately 19.073 kHz.
      notes: |
        The settings in this register will take effect and be latched into
        `CPU_MODE_CURRENT` at the next reset.
    - name: CPU_MODE_CURRENT
      start: 0xF341
      end: 0xF341
      bits:
        - name: CODE_LOCATION
          start: 0
          end: 0
          permissions: RO
          notes: |
            This bit is set if the current code is executing from CODE RAM,
            and it's clear if executing from CODE ROM. This bit will always be
            set when our code is running, since our code is always loaded from
            flash into CODE RAM by the CODE ROM.
        - name: CLOCK_DIV
          start: 1
          end: 1
          permissions: RO
          notes: |
            If set, this bit indicates that the CPU clock is being divided by
            two. If it's clear, the CPU clock is not being divided by two. See
            `CPU_MODE_NEXT.CLOCK_DIV` for more information.
      notes: |
        The value of this register is latched from `CPU_MODE_NEXT` on reset,
        and indicates the settings for the currently-executing code.
    - name: CPU_EXEC_CTRL
      start: 0xF342
      end: 0xF342
      bits:
        - name: RESET
          start: 0
          end: 0
          permissions: RW
          notes: |
            Set this bit to reset the CPU.
        - name: HALT
          start: 1
          end: 1
          permissions: RW
          notes: |
            Set this bit to halt the CPU and hold it in reset. Since the CPU
            can't un-halt itself, the only way to recover from this state is to
            use the `MMIO_ACCESS` register in PCI config space to clear this
            bit.
    - name: FLASH_CON_DIV
      start: 0xF360
      end: 0xF360
      permissions: RW
      notes: |
        SPI clock divisor. SPI clock frequency is equal to
        `78.125 MHz / (FLASH_CON_DIV + 1)`. The SPI clock is not affected by the
        CPU clock divider--the base frequency is always 78.125 MHz.
    - name: FLASH_CON_ADDR_LEN
      start: 0xF361
      end: 0xF361
      permissions: RW
      notes: |
        The number of flash address (`FLASH_CON_FLASH_ADDR`)  bytes to write to
        the SPI bus. The minimum is zero bytes while the maximum is three.
    - name: FLASH_CON_CMD
      start: 0xF362
      end: 0xF362
      permissions: RW
      notes: |
        The flash command you want to execute. e.g., to read data from flash,
        write command 0x03 into this register.
    - name: FLASH_CON_MODE
      start: 0xF363
      end: 0xF363
      bits:
        - name: WRITE_N_READ
          start: 0
          end: 0
          permissions: RW
          notes: |
            Set to write data from XRAM to the SPI bus, clear to read data from
            the bus into XRAM. Note that reading/writing here refers only to the
            transaction on the bus--whether data is stored into or retrieved
            from the flash memory (or one of its registers) depends on the flash
            command in `FLASH_CON_CMD`.
    - name: FLASH_CON_MEMSEL
      start: 0xF364
      end: 0xF364
      bits:
        - name: SEL
          start: 0
          end: 0
          permissions: RW
          notes: |
            Set to make the flash controller access CODE RAM. Clear to have it
            access XRAM. Note that the flash controller cannot read into CODE
            RAM while the CPU is executing from it.
    - name: FLASH_CON_XRAM_ADDR
      start: 0xF366
      end: 0xF367
      permissions: RW
      notes: |
        The address in XRAM to read SPI bus data into/write SPI bus data from.
    - name: FLASH_CON_FLASH_ADDR
      start: 0xF368
      end: 0xF36B
      permissions: RW
      notes: |
        The flash address to read from/write to.
    - name: FLASH_CON_DATA_LEN
      start: 0xF36C
      end: 0xF36D
      permissions: RW
      notes: |
        The number of data bytes to read from the SPI bus into XRAM/write to the
        SPI bus from XRAM.
    - name: FLASH_CON_CSR
      start: 0xF36E
      end: 0xF36E
      bits:
        - name: RUN
          start: 0
          end: 0
          permissions: RW1S
          notes: |
            Set to start the SPI transaction. This bit will remain set until the
            transaction has completed, at which point it will automatically
            clear itself.
    - name: FLASH_CON_CRC32_IN
      start: 0xF370
      end: 0xF373
      permissions: RW
      notes: |
        The initial value to use for the CRC32 calculation. Generally, this
        should be set to 0xFFFFFFFF.
    - name: FLASH_CON_CRC32_OUT
      start: 0xF374
      end: 0xF377
      permissions: RW
      notes: |
        The CRC32 of the data read by the flash controller. This is the standard
        CRC32 used in Ethernet, zlib, and many other systems.
    - name: CHIP_VERSION
      start: 0xF38C
      end: 0xF38C
      permissions: RO
      notes: |
        Some hardware version number that is set during the manufacturing
        process. Presumably, this represents the silicon die revision.
    - name: BOOT_PARAMS
      start: 0xF3D8
      end: 0xF3DB
      bits:
        - name: UART_LOG_ENABLE
          start: 2
          end: 2
          permissions: RW
          notes: |
            Tell the CODE ROM to enable more detailed log output on the UART.
    - name: PCI_CONFIG_VID_DID
      start: 0xF3E0
      end: 0xF3E3
      bits:
        - name: VENDOR_ID
          start: 0
          end: 15
          permissions: RW
          notes: |
            PCI Vendor ID.
        - name: DEVICE_ID
          start: 16
          end: 31
          permissions: RW
          notes: |
            PCI Device ID.
      notes: |
        The Vendor ID and Device ID register in PCI configuration space
        (offset 0x00).
    - name: PCI_CONFIG_CLASS_REV
      start: 0xF3E4
      end: 0xF3E7
      bits:
        - name: REVISION_ID
          start: 0
          end: 7
          permissions: RW
          notes: |
            PCI Revision ID.
        - name: CLASS_CODE
          start: 8
          end: 31
          permissions: RW
          notes: |
            PCI Class Code.
      notes: |
        The Class Code and Revision ID register in PCI configuration space
        (offset 0x08).
    - name: UART_LOG_RCFG
      start: 0xF3FC
      end: 0xF3FF
      permissions: RW
      notes: |
        Write `0x12345678` into this register to tell the CODE ROM to print
        "external settings" from RCFG.
    - name: XHCI_HCIVERSION
      start: 0xF602
      end: 0xF603
      permissions: RW
      notes: |
        Host Controller Interface Version Number. See the xHCI specification
        for details.
    - name: XHCI_HCSPARAMS1
      start: 0xF604
      end: 0xF607
      permissions: RW
      notes: |
        Host Controller Structural Parameters 1. See the xHCI specification
        for details.
    - name: XHCI_HCSPARAMS2
      start: 0xF608
      end: 0xF60B
      permissions: RW
      notes: |
        Host Controller Structural Parameters 2. See the xHCI specification
        for details.
    - name: XHCI_HCSPARAMS3
      start: 0xF60C
      end: 0xF60F
      permissions: RW
      notes: |
        Host Controller Structural Parameters 3. See the xHCI specification
        for details.
    - name: XHCI_HCCPARAMS1
      start: 0xF610
      end: 0xF613
      permissions: RW
      notes: |
        Host Controller Capability Parameters 1. See the xHCI specification
        for details.
    - name: XHCI_DBOFF
      start: 0xF614
      end: 0xF617
      permissions: RW
      notes: |
        Doorbell Offset. See the xHCI specification for details.
    - name: XHCI_RTSOFF
      start: 0xF618
      end: 0xF61B
      permissions: RW
      notes: |
        Runtime Register Space Offset. See the xHCI specification for details.
    - name: XHCI_HCCPARAMS2
      start: 0xF61C
      end: 0xF61F
      permissions: RW
      notes: |
        Host Controller Capability Parameters 2. See the xHCI specification
        for details.
    - name: XHCI_CRCR
      start: 0xF638
      end: 0xF63F
      permissions: RO
      notes: |
        Command Ring Control Register. See the xHCI specification for details.
    - name: XHCI_DCBAAP
      start: 0xF650
      end: 0xF657
      permissions: RO
      notes: |
        Device Context Base Address Array Pointer Register. See the xHCI
        specification for details.
    - name: XHCI_SPCAP0
      start: 0xF6A0
      end: 0xF6BF
      permissions: RW
      notes: |
        The first of two xHCI Supported Protocol Capability regions. See the
        xHCI specification for details.
    - name: XHCI_SPCAP1
      start: 0xF6C0
      end: 0xF6DF
      permissions: RW
      notes: |
        The second of two xHCI Supported Protocol Capability regions. See the
        xHCI specification for details.
