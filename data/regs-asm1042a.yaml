meta:
  chip: ASM1042A
  license: CC-BY-SA-4.0

registers:
  pci:
    - name: MBOX_DOORBELL
      start: 0xE0
      end: 0xE0
      bits:
        - name: READ_ACK
          start: 0
          end: 0
          permissions: RW1C
          notes: |
            A flag that can be read, set, or cleared by the 8051, but can only
            be read or cleared by the host. Corresponds to
            `PCI_CONFIG_READ_ACK` in XDATA.
        - name: WRITE_START
          start: 1
          end: 1
          permissions: RW1S
          notes: |
            A flag that can be read, set, or cleared by the 8051, but can only
            be read or set by the host. Corresponds to `PCI_CONFIG_WRITE_START`
            in XDATA.
    - name: CODE_RAM_ADDR
      start: 0xE2
      end: 0xE3
      permissions: RW
      notes: |
        The next address in CODE RAM to be written to. Aligned on 2-byte
        boudaries (bit zero is permanently set to zero). Highest bit is always
        zero--the 32 kB bank to write to is selected by writing the data to
        either `LOWER_BANK_DATA` or `UPPER_BANK_DATA`. Increments by two on
        every write to `LOWER_BANK_DATA` or `UPPER_BANK_DATA`.
    - name: CODE_RAM_DATA
      start: 0xE4
      end: 0xE7
      bits:
        - name: LOWER_BANK_DATA
          start: 0
          end: 15
          permissions: WO
          notes: |
            The 16-bit little-endian data to write to `CODE_RAM_ADDR + 0x0000`.
        - name: UPPER_BANK_DATA
          start: 16
          end: 31
          permissions: WO
          notes: |
            The 16-bit little-endian data to write to `CODE_RAM_ADDR + 0x8000`.
      notes: |
        Bit 15 in the CODE RAM write address is cleared when writing to
        `LOWER_BANK_DATA` and set when writing to `UPPER_BANK_DATA`. After
        writing to either `LOWER_BANK_DATA` or `UPPER_BANK_DATA`,
        `CODE_RAM_ADDR` is increased by two.
    - name: CPU_STATUS
      start: 0xE4
      end: 0xE7
      bits:
        - name: PC
          start: 0
          end: 15
          permissions: RO
          notes: |
            The current 8051 program counter.
        - name: MODE
          start: 16
          end: 23
          permissions: RO
          notes: |
            The current value of `CPU_MODE_CURRENT`. See `CPU_MODE_CURRENT` for
            more information.
    - name: MMIO_ACCESS
      start: 0xE8
      end: 0xEB
      bits:
        - name: ADDRESS
          start: 0
          end: 15
          permissions: RW
          notes: |
            The address of the MMIO byte that you want to access.
        - name: WRITE_DATA
          start: 16
          end: 23
          permissions: RW
          notes: |
            The data you want to write to `ADDRESS`.
        - name: READ_DATA
          start: 24
          end: 31
          permissions: RO
          notes: |
            The byte read from `ADDRESS`.
      notes: |
        This register grants access to MMIO registers entirely in hardware,
        without involving the 8051 core. To read or write a register, first
        write the address to `ADDRESS`, then either write your data to
        `WRITE_DATA` or read it from `READ_DATA`. Please note that data is
        latched into `READ_DATA` only when writing to `ADDRESS`, so if you want
        to read a register you have just written to, you need to write the
        address to `ADDRESS` again before reading `READ_DATA`. Also note that
        this register can not be used to access XRAM--only MMIO access is
        possible.
    - name: CPU_CONTROL
      start: 0xEC
      end: 0xEF
      bits:
        - name: RESET
          start: 31
          end: 31
          permissions: RW
          notes: |
            Set to hold the 8051 and xHC in reset, clear to release from reset.
    - name: MBOX_D2H
      start: 0xF0
      end: 0xF7
      permissions: RO
      notes: |
        A mailbox register, from which data sent by the device can be read.
    - name: MBOX_H2D
      start: 0xF8
      end: 0xFF
      permissions: RW
      notes: |
        A mailbox register, to which data from the host can be written.

  xdata:
    - name: PCI_CONFIG_READ_ACK
      start: 0xF0D0
      end: 0xF0D0
      bits:
        - name: READ_ACK
          start: 0
          end: 0
          permissions: RW
          notes: |
            Corresponds to PCI configuration space register 0xE0
            (`MBOX_DOORBELL`), bit 0.
    - name: PCI_CONFIG_WRITE_START
      start: 0xF0D1
      end: 0xF0D1
      bits:
        - name: WRITE_START
          start: 0
          end: 0
          permissions: RW
          notes: |
            Corresponds to PCI configuration space register 0xE0
            (`MBOX_DOORBELL`), bit 1.
    - name: PCI_CONFIG_D2H0
      start: 0xF0D8
      end: 0xF0DB
      permissions: RW
      notes: |
        Corresponds to PCI configuration space register 0xF0 (`MBOX_D2H`).
        Writable by the device, RO for the host.
    - name: PCI_CONFIG_D2H1
      start: 0xF0DC
      end: 0xF0DF
      permissions: RW
      notes: |
        Corresponds to PCI configuration space register 0xF4 (`MBOX_D2H`).
        Writable by the device, RO for the host.
    - name: PCI_CONFIG_H2D0
      start: 0xF0E0
      end: 0xF0E3
      permissions: RO
      notes: |
        Corresponds to PCI configuration space register 0xF8 (`MBOX_H2D`).
        Writable by the host, RO for the device.
    - name: PCI_CONFIG_H2D1
      start: 0xF0E4
      end: 0xF0E7
      permissions: RO
      notes: |
        Corresponds to PCI configuration space register 0xFC (`MBOX_H2D`).
        Writable by the host, RO for the device.
    - name: UART_RBR
      start: 0xF100
      end: 0xF100
      permissions: RO
      notes: |
        UART Receive Buffer Register.
    - name: UART_THR
      start: 0xF101
      end: 0xF101
      permissions: RW
      notes: |
        UART Transmit Hold Register.
    - name: UART_RFBR
      start: 0xF105
      end: 0xF105
      permissions: RO
      notes: |
        UART RX FIFO Bytes Received. Indicates the number of bytes in the RX
        FIFO available for reading, and decreases by 1 each time `UART_RBR` is
        read.
    - name: UART_TFBF
      start: 0xF106
      end: 0xF106
      permissions: RO
      notes: |
        UART TX FIFO Bytes Free. Indicates the amount of space available in
        the TX FIFO. Increases by 1 each time `UART_THR` is written to, and
        decreases by 1 for each byte that gets transmitted.
    - name: UART_LCR
      start: 0xF107
      end: 0xF107
      bits:
        - name: DATA_BITS
          start: 0
          end: 1
          permissions: RW
          notes: |
            The number of data bits per character.

            * 0: 5 bits
            * 1: 6 bits
            * 2: 7 bits
            * 3: 8 bits
        - name: STOP_BITS
          start: 2
          end: 2
          permissions: RW
          notes: |
            The number of stop bits per character.

            * 0: 1 stop bit
            * 1: 2 stop bits

            Unlike 8250-compatible UARTs, when this bit is set, 5-bit
            characters will have two stop bits, not 1.5.
        - name: PARITY
          start: 3
          end: 5
          permissions: RW
          notes: |
            The parity bit setting.

            * 0bXX0: None
            * 0b001: Odd
            * 0b011: Even
            * 0b101: Mark
            * 0b111: Space
      notes: |
        UART Line Control Register. The reset value is 0x0B (mode 8O1), so if
        you want to use mode 8N1, you need to set this to 0x03.
    - name: UART_DIV
      start: 0xF109
      end: 0xF10A
      permissions: RW
      notes: |
        UART clock divisor. The baudrate of the UART is equal to
        `125 MHz / UART_DIV`. The UART clock is not affected by the CPU clock
        divider--the base frequency is always 125 MHz.
    - name: CPU_MODE_NEXT
      start: 0xF340
      end: 0xF340
      bits:
        - name: CODE_LOCATION
          start: 0
          end: 0
          permissions: RW
          notes: |
            Set this bit to boot from CODE RAM, clear to boot from CODE ROM.
        - name: CLOCK_DIV
          start: 1
          end: 1
          permissions: RW
          notes: |
            Set this bit to divide the CPU clock frequency by two. This affects
            both the CPU and the timer peripheral, as the timer clock is derived
            from the CPU clock. Set this bit to set the CPU clock to 62.5 MHz
            and the timer clock to approximately ??? kHz. Clear this bit to
            use the undivided CPU clock speed of 125 MHz and timer clock
            speed of approximately ??? kHz.
      notes: |
        The settings in this register will take effect and be latched into
        `CPU_MODE_CURRENT` at the next reset.
    - name: CPU_MODE_CURRENT
      start: 0xF341
      end: 0xF341
      bits:
        - name: CODE_LOCATION
          start: 0
          end: 0
          permissions: RO
          notes: |
            This bit is set if the current code is executing from CODE RAM,
            and it's clear if executing from CODE ROM. This bit will always be
            set when our code is running, since our code can only ever be
            written to CODE RAM as CODE ROM is read-only.
        - name: CLOCK_DIV
          start: 1
          end: 1
          permissions: RO
          notes: |
            If set, this bit indicates that the CPU clock is being divided by
            two. If it's clear, the CPU clock is not being divided by two. See
            `CPU_MODE_NEXT.CLOCK_DIV` for more information.
      notes: |
        The value of this register is latched from `CPU_MODE_NEXT` on reset,
        and indicates the settings for the currently-executing code.
    - name: CPU_EXEC_CTRL
      start: 0xF342
      end: 0xF342
      bits:
        - name: RESET
          start: 0
          end: 0
          permissions: RW
          notes: |
            Set this bit to reset the CPU.
        - name: HALT
          start: 1
          end: 1
          permissions: RW
          notes: |
            Set this bit to halt the CPU and hold it in reset. Since the CPU
            can't un-halt itself, the only way to recover from this state is to
            use the `MMIO_ACCESS` register in PCI config space to clear this
            bit.
    - name: CPU_MISC
      start: 0xF343
      end: 0xF343
      bits:
        - name: CODE_RAM_WRITE_ENABLE
          start: 1
          end: 1
          permissions: RW
          notes: |
            Set this bit to enable the host to write to CODE RAM using the
            `CODE_RAM_ADDR` and `CODE_RAM_DATA` PCI config space registers.
    - name: CHIP_VERSION
      start: 0xF38C
      end: 0xF38C
      permissions: RO
      notes: |
        Some hardware version number that is set during the manufacturing
        process. Presumably, this represents the silicon die revision.
    - name: PCI_CONFIG_SVID_SSID
      start: 0xF390
      end: 0xF393
      bits:
        - name: SUBSYSTEM_VID
          start: 0
          end: 15
          permissions: RW
          notes: |
            PCI Subsystem Vendor ID.
        - name: SUBSYSTEM_ID
          start: 16
          end: 31
          permissions: RW
          notes: |
            PCI Subsystem ID.
      notes: |
        The Subsystem Vendor ID and Subsystem ID register in PCI configuration
        space (offset 0x2C).
    - name: PCI_CONFIG_VID_DID
      start: 0xF3E0
      end: 0xF3E3
      bits:
        - name: VENDOR_ID
          start: 0
          end: 15
          permissions: RW
          notes: |
            PCI Vendor ID.
        - name: DEVICE_ID
          start: 16
          end: 31
          permissions: RW
          notes: |
            PCI Device ID.
      notes: |
        The Vendor ID and Device ID register in PCI configuration space
        (offset 0x00).
    - name: PCI_CONFIG_CLASS_REV
      start: 0xF3E4
      end: 0xF3E7
      bits:
        - name: REVISION_ID
          start: 0
          end: 7
          permissions: RW
          notes: |
            PCI Revision ID.
        - name: CLASS_CODE
          start: 8
          end: 31
          permissions: RW
          notes: |
            PCI Class Code.
      notes: |
        The Class Code and Revision ID register in PCI configuration space
        (offset 0x08).
